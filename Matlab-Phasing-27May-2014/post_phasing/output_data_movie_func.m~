function output_data_movie_func(dir_file)
%%
% used to display data and output eps and png files
% this is a 'master copy' with dir_file specifying the reconstruction
% directory to look in.  alternatively, copy display_data.m (this is
% display_data_func.m) and run from the reconstruction directory get it 
% to act 'locally'.

%%

orientation='xy'; %specify which direction you want a movie to be

%%
try
    data_dir=dir_file;
catch
    name_of_this_file='output_data_movie_func';
    dir_file=which(name_of_this_file);
    dir_file=dir_file(1:findstr(dir_file,name_of_this_file)-1);
    data_dir=dir_file;
end

pfile=rdir([dir_file,'**/*PARAMS.mat']);
pfile=pfile(1).name;
load(pfile)

dir_file=[dir_file,'Data-movie-',orientation,'/'];       %where to save output images
if isdir(dir_file) ==0,mkdir(dir_file);end  %create the dir if it doesn't exist

bin=params.binning; %get the binning, want to display with minimal binning though

bin(1)=min([bin(1),1]);
bin(2)=min([bin(2),1]); %set a maximimum binning of 2

try 
    aliens=params.aliens;
catch
    aliens=[];
end

files=params.files;
back=params.back;
min_data=params.min_data;

try
    params.data_dir;
    data_dir=params.data_dir;
end

try
    nnc=params.nnc;             % not support yet, will be used for initial cropping
catch
    nnc=[0];
end

full_files=strcat(data_dir,files);
if numel(back) ~= 0,full_bg=strcat(data_dir,back);else full_bg=[];end



data=bin_crop_center(full_files,full_bg,bin,min_data,aliens,nnc);

data=data/max(max(max(data)));

nn=size(data);
nn=[nn(2),nn(1),nn(3)];

%make them even
new_n=[round(0.7*nn(1)),round(0.7*nn(2)),round(0.7*nn(3))];
new_n=( mod(new_n,2) == 1)+new_n;

data=extract_max(data,new_n(1),new_n(2),new_n(3));

sz=size(data);

cent=round(sz/2);

xc=cent(2);
yc=cent(1);
zc=cent(3);

lam=params.lam;
zd=params.arm;
det_px=params.det_px;
dth=params.dth;

try 
    bin;
catch
    bin=params.binning;
end

det_py=det_px*bin(2);
det_px=det_px*bin(1);
det_pz=2*zd*sin(pi/180*dth/2);

x  = extract_1D_slice(data,'x',yc,zc );
x=x/max(abs(x));

y  = extract_1D_slice(data,'y',xc,zc );
y=y/max(abs(y));

z  = extract_1D_slice(data,'z',xc,yc );
z=z/max(abs(z));

x=log10(x);
y=log10(y);
z=log10(z);


maxx=find(x == max(x));

maxy=find(y == max(y));

maxz=find(z == max(z));

if numel(maxx) == 1
    qx=(1:size(x))-maxx;
else 
    qx=(1:size(x))-maxx(1)-0.5;
end

if numel(maxy) == 1
    qy=(1:size(y))-maxy;
else 
    qy=(1:size(y))-maxy(1)-0.5;
end

if numel(maxz) == 1
    qz=(1:size(z))-maxz;
else 
    qz=(1:size(z))-maxz(1)-0.5;
end

hx=lam*zd/det_px./abs(qx);
hx(find(hx == Inf))=zd*lam/det_px;

hy=lam*zd/det_py./abs(qy);
hy(find(hy == Inf))=zd*lam/det_py;

hz=lam*zd/det_pz./abs(qz);
hz(find(hz == Inf))=zd*lam/det_pz;

qx=(2*pi/lam)*qx*(det_px/zd);

qy=(2*pi/lam)*qy*(det_py/zd);

qz=(2*pi/lam)*qz*(det_pz/zd);

lw=1.5;

font_size=25;

%% 
switch orientation
    
    case 'xy'
        zzc=size(data,3);
        for qq=1:zzc
            
            mov_name=[num2str(qq)];

            while numel(mov_name) < numel(num2str(zzc))
                mov_name=['0',mov_name];
            end


            xy=extract_3D_slice(data,'xy',qq);
            xy=log10(xy);
            fh = figure(30) ; % returns the handle to the figure object
            set(fh, 'color', 'white'); % sets the color to white 
            %set(fh,'Position',[100,100,1200,1200])
            imagesc(qx,qy,xy)
            xlabel('Spatial Frequency (nm^{-1})','FontSize', round(0.5*font_size)), ylabel('Spatial Frequency (nm^{-1})','FontSize', round(0.5*font_size))
            set(gca,'FontSize',round(0.5*font_size))
            set(gcf,'PaperUnits','inches','PaperPosition',[0 0 4 3])
            title(orientation)
            print(fh, '-djpeg','-r200', [dir_file,mov_name]);
            %exportfig(fh,[dir_file,'ROI_X-Y'],'Color','rgb','Renderer','zbuffer')
         end
            
    case 'xz'
        zzc=size(data,1);
        for qq=1:zzc
            
            mov_name=[num2str(qq)];

            while numel(mov_name) < numel(num2str(zzc))
                mov_name=['0',mov_name];
            end
            
            xz=extract_3D_slice(data,'xz',qq);
            xz=log10(xz);
            fh = figure(30) ; % returns the handle to the figure object
            set(fh, 'color', 'white'); % sets the color to white 
            imagesc(qx,qz,xz)
            set(gca,'FontSize',round(0.8*font_size))
            xlabel('Spatial Frequency (nm^{-1})','FontSize', font_size), ylabel('Spatial Frequency (nm^{-1})','FontSize', font_size)
            title(orientation)
            print(fh, '-djpeg','-r300', [dir_file,mov_name]);
            %exportfig(fh,[dir_file,'ROI_X-Z'],'Color','rgb','Renderer','zbuffer')
            
        end

    case 'yz'

        yz=extract_3D_slice(data,'yz',xc);
        yz=log10(yz);
        fh = figure(30) ; % returns the handle to the figure object
        set(fh, 'color', 'white'); % sets the color to white 
        imagesc(qy,qz,yz)
        set(gca,'FontSize',round(0.8*font_size))
        xlabel('Spatial Frequency (nm^{-1})','FontSize', font_size), ylabel('Spatial Frequency (nm^{-1})','FontSize', font_size)
        print(fh, '-djpeg','-r300', [dir_file,mov_name]);
        %exportfig(fh,[dir_file,'ROI_Y-Z'],'Color','rgb','Renderer','zbuffer')

end
        
cd(dir_file)
%ffmpeg -f image2 -r 20 -mbd rd -trellis 2 -cmp 2 -subcmp 2 -g 100 -pass 1/2 -b 5000k -i %03d.jpg video.mpg
%command=['ffmpeg -f image2 -r 20 -b 200k -i %0',num2str(numel(mov_name)),'d.jpg video.mpg'];
command=['ffmpeg -f image2 -r 20 -mbd rd -trellis 2 -cmp 2 -subcmp 2 -g 100 -pass 1/2 -b 5000k -i %0',num2str(numel(mov_name)),'d.jpg video.mpg'];
system(command)
%ffmpeg -f image2 -r 20 -b 200k -i %03d.jpg video.avi
command=['ffmpeg -f image2 -r 20 -mbd rd -trellis 2 -cmp 2 -subcmp 2 -g 100 -pass 1/2 -b 5000k -i %0',num2str(numel(mov_name)),'d.jpg video.avi'];
system(command)
%ffmpeg -f image2 -r 20 -mbd rd -flags +mv4+aic -trellis 2 -cmp 2 -subcmp 2 -g 300 -pass 1/2 -b 5000k -i %03d.jpg video.mp4
command=['ffmpeg -f image2 -r 20 -mbd rd -flags +mv4+aic -trellis 2 -cmp 2 -subcmp 2 -g 300 -pass 1/2 -b 5000k -i %0',num2str(numel(mov_name)),'d.jpg video.mp4'];
%command=['ffmpeg -f image2 -r 20 -b 200k -i %0',num2str(numel(mov_name)),'d.jpg video.mp4'];
system(command)

cd ..

end

% fh = figure ; % returns the handle to the figure object
% set(fh, 'color', 'white'); % sets the color to white 
% plot(qx,x,'LineWidth',lw,'Color','blue')
% set(gca,'FontSize',round(0.8*font_size))
% xlabel('Spatial Frequency (nm^{-1})','FontSize', font_size), ylabel('Intensity (Arb. units, log scale)','FontSize', font_size)
% axis([min(min([qx,-qx])) max(max([qx,-qx])) min(x) .1 ])
% saveas(fh, [dir_file,'line_out_X'], 'epsc');
% print(fh, '-dpng','-r300', [dir_file,'line_out_X']);
% 
% 
% fh = figure ; % returns the handle to the figure object
% set(fh, 'color', 'white'); % sets the color to white 
% plot(qy,y,'LineWidth',lw,'Color','blue')
% set(gca,'FontSize',round(0.8*font_size))
% xlabel('Spatial Frequency (nm^{-1})','FontSize', font_size), ylabel('Intensity (Arb. units, log scale)','FontSize', font_size)
% axis([min(min([qy,-qy])) max(max([qy,-qy])) min(y) .1])
% saveas(fh, [dir_file,'line_out_Y'], 'epsc'); 
% print(fh, '-dpng','-r300', [dir_file,'line_out_Y']);
% 
% fh = figure ; % returns the handle to the figure object
% set(fh, 'color', 'white'); % sets the color to white 
% plot(qz,z,'LineWidth',lw,'Color','blue') 
% set(gca,'FontSize',round(0.8*font_size))
% xlabel('Spatial Frequency (nm^{-1})','FontSize', font_size), ylabel('Intensity (Arb. units, log scale)','FontSize', font_size)
% axis([min(min([qz,-qz])) max(max([qz,-qz])) min(z) .1])
% saveas(fh, [dir_file,'line_out_Z'], 'epsc'); 
% print(fh, '-dpng','-r300', [dir_file,'line_out_Z']);

